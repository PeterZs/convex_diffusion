% This script serves as an example to compare diffusion encoding gradient
% waveforms generated by an analytical method creating symmetric
% waveforms against a convex optimization method generating concomitant
% field corrected asymmetric waveforms
% Settings and targets can be adapted as suited in parameters.m


%% Initialize
close all
path = fileparts(which(mfilename));
addpath(genpath(path))
SAVE = true;	% Set flag to save results to disk

%% Create waveforms
% Design symmetric waveform
sym = symmetricDiffusion(parameters('sym'));

% Set encoding duration bounds for optimization
nTop = round(sym.nE-sym.param.nRead/2);
nBot = sym.param.nRF;

% Design convex waveforms
asym = convexDiffusion(parameters('asym'), nBot, nTop);
coco = convexDiffusion(parameters('coco'), nBot, nTop);

%% Calculate and display results
sym = finalResults(sym);
fprintf(['Symmetric:   ' sym.info '\n']);
asym = finalResults(asym);
fprintf(['Asymmetric:  ' asym.info '\n']);
coco = finalResults(coco);
fprintf(['Concomitant: ' coco.info '\n']);

% Create plots
plotGradients(sym, asym, coco);
plotResiduals(sym, asym, coco);

% Save to disk
if SAVE
	saveResults(sym, asym, coco);
end