% This script serves as an example to compare diffusion encoding gradient
% waveforms generated by an analytical method creating symmetric
% waveforms against a convex optimization method generating concomitant
% field corrected codemetric waveforms
% Settings and targets can be adapted as suited in parameters.m


%% Initialize
path = fileparts(which(mfilename));
addpath(genpath(path))

%% Simulate waveforms for all parameter combinations
M = [0 1 2];
b = [100:100:1000] * 1e6;
G = [40 80 150 300] * 1e-3;
S = [62.5 100 200];
tEPI = [12 16 20 24 28 32] * 1e-3;
c = combvec(tEPI, S, G, b, M);

for i = 1:size(c,2)
	
	fprintf('Running simulation %d of %d \n', i, size(c,2));
	tic
	
	% Symmetric waveform
	p = parameters('sym');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tEPI = c(1,i);
    p.nEPI = round(p.tEPI/p.dt);
	sym = symmetricDiffusion(p);
	sym.elapsed = toc;

	% codeetric waveform
	p = parameters('code');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tEPI = c(1,i);
    p.nEPI = round(p.tEPI/p.dt);
	code = convexDiffusion(p, 0, sym.n, 0);
	code.elapsed = toc;

	% Maxwell-compensated waveform
	p = parameters('coco');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tEPI = c(1,i);
    p.nEPI = round(p.tEPI/p.dt);
	coco = convexDiffusion(p, code.n, sym.n, 0);
	coco.elapsed = toc;

	% Calculate results
	sym = finalResults(sym);
	code = finalResults(code);
	coco = finalResults(coco);
    
    % Create plots
    h1 = plotGradients(sym, code, coco);
    h2 = plotResiduals(sym, code, coco);

	% Save to disk
	saveResults(sym, code, coco);
    saveFigures(p, h1, h2);
	
end