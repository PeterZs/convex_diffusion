% This script serves as an example to compare diffusion encoding gradient
% waveforms generated by an analytical method creating symmetric
% waveforms against a convex optimization method generating concomitant
% field corrected asymmetric waveforms
% Settings and targets can be adapted as suited in parameters.m


%% Initialize
path = fileparts(which(mfilename));
addpath(genpath(path))
if isempty(gcp)
	parpool('local', 6);
end

%% Simulate waveforms for all parameter combinations
M = [0 1 2];
b = [50 250 400 500 1000 2000] * 1e6;
G = [40 80 120 150 200 250 300] * 1e-3;
S = [50 100 150 200 150 300];
EPI = [24 32 48] * 1e-3;
c = combvec(EPI, S, G, b, M);

parfor i = 1:size(c,2)
	fprintf('Running simulation %d of %d \n', i, size(c,2));
	
	% Symmetric waveform
	p = parameters('sym');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tRead = c(1,i);
	sym = symmetricDiffusion(p);

	% Asymetric waveform
	p = parameters('asym');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tRead = c(1,i);
	asym = convexDiffusion(p, 0, sym.n, 0);

	% Maxwell-compensated waveform
	p = parameters('coco');
	p.MMT = c(5,i); p.bTarget = c(4,i); p.Gmax = c(3,i); p.Smax = c(2,i); p.tRead = c(1,i);
	coco = convexDiffusion(p, asym.n, sym.n, 0);

	% Calculate results
	sym = finalResults(sym);
	asym = finalResults(asym);
	coco = finalResults(coco);

	% Create plots
	h1 = plotGradients(sym, asym, coco);
	h2 = plotResiduals(sym, asym, coco);

	% Save to disk
	saveResults(sym, asym, coco, h1, h2);
end

%% Deinitialize
delete(gcp('nocreate'));